// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package job

import (
	defaults "github.com/creasty/defaults"
	helpers "github.com/ecordell/optgen/helpers"
	config "helloworld/config"
)

type ParamConfigOption func(p *ParamConfig)

// NewParamConfigWithOptions creates a new ParamConfig with the passed in options set
func NewParamConfigWithOptions(opts ...ParamConfigOption) *ParamConfig {
	p := &ParamConfig{}
	for _, o := range opts {
		o(p)
	}
	return p
}

// NewParamConfigWithOptionsAndDefaults creates a new ParamConfig with the passed in options set starting from the defaults
func NewParamConfigWithOptionsAndDefaults(opts ...ParamConfigOption) *ParamConfig {
	p := &ParamConfig{}
	defaults.MustSet(p)
	for _, o := range opts {
		o(p)
	}
	return p
}

// ToOption returns a new ParamConfigOption that sets the values from the passed in ParamConfig
func (p *ParamConfig) ToOption() ParamConfigOption {
	return func(to *ParamConfig) {
		to.App = p.App
		to.Log = p.Log
		to.PostgreSQL = p.PostgreSQL
		to.Feature = p.Feature
		to.ConfigFile = p.ConfigFile
		to.ReportPath = p.ReportPath
	}
}

// DebugMap returns a map form of ParamConfig for debugging
func (p ParamConfig) DebugMap() map[string]any {
	debugMap := map[string]any{}
	debugMap["App"] = helpers.DebugValue(p.App, false)
	debugMap["Log"] = helpers.DebugValue(p.Log, false)
	debugMap["PostgreSQL"] = helpers.DebugValue(p.PostgreSQL, false)
	debugMap["Feature"] = helpers.DebugValue(p.Feature, false)
	debugMap["ConfigFile"] = helpers.DebugValue(p.ConfigFile, false)
	debugMap["ReportPath"] = helpers.DebugValue(p.ReportPath, false)
	return debugMap
}

// ParamConfigWithOptions configures an existing ParamConfig with the passed in options set
func ParamConfigWithOptions(p *ParamConfig, opts ...ParamConfigOption) *ParamConfig {
	for _, o := range opts {
		o(p)
	}
	return p
}

// WithOptions configures the receiver ParamConfig with the passed in options set
func (p *ParamConfig) WithOptions(opts ...ParamConfigOption) *ParamConfig {
	for _, o := range opts {
		o(p)
	}
	return p
}

// WithApp returns an option that can set App on a ParamConfig
func WithApp(app config.App) ParamConfigOption {
	return func(p *ParamConfig) {
		p.App = app
	}
}

// WithLog returns an option that can set Log on a ParamConfig
func WithLog(log config.Log) ParamConfigOption {
	return func(p *ParamConfig) {
		p.Log = log
	}
}

// WithPostgreSQL returns an option that can set PostgreSQL on a ParamConfig
func WithPostgreSQL(postgreSQL config.PG) ParamConfigOption {
	return func(p *ParamConfig) {
		p.PostgreSQL = postgreSQL
	}
}

// WithFeature returns an option that can set Feature on a ParamConfig
func WithFeature(feature config.Feature) ParamConfigOption {
	return func(p *ParamConfig) {
		p.Feature = feature
	}
}

// WithConfigFile returns an option that can set ConfigFile on a ParamConfig
func WithConfigFile(configFile string) ParamConfigOption {
	return func(p *ParamConfig) {
		p.ConfigFile = configFile
	}
}

// WithReportPath returns an option that can set ReportPath on a ParamConfig
func WithReportPath(reportPath string) ParamConfigOption {
	return func(p *ParamConfig) {
		p.ReportPath = reportPath
	}
}
